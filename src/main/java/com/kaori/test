select
c_custkey, c_name, //客户信息
sum(l_extendedprice * (1 - l_discount)) as revenue, //收入损失
c_acctbal,
n_name, c_address, c_phone, c_comment //国家、地址、电话、意见信息等
from
customer, orders, lineitem, nation
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate >= date '[DATE]' // DATE是位于1993年一月到1994年十二月中任一月的一号
and o_orderdate < date '[DATE]' + interval '3' month //3个月内
and l_returnflag = 'R' //货物被回退
and c_nationkey = n_nationkey
group by
c_custkey,c_name,c_acctbal,c_phone,n_name,c_address,c_comment
order by revenue desc;

select
    l_orderkey,sum(l_extendedprice*(1-l_discount)) as revenue,o_orderdate,o_shippriority
from
    customer, orders, lineitem
where
    c_mktsegment = '[SEGMENT]'
    and c_custkey = o_custkey
    and l_orderkey = o_orderkey
    and o_orderdate < date '[DATE]'
    and l_shipdate > date '[DATE]'
group by
    l_orderkey,o_orderdate,o_shippriority
order by
    revenue desc,o_orderdate;



        /*
        * Here we use FlatMapFunction istead of MapFunction since

        DataStream<LineItem> lineItemStream = routingStream
                .getSideOutput(TAG_LineItem)
                .flatMap(new FlatMapFunction<String, LineItem>() {
                    @Override
                    public void flatMap(String value, Collector<LineItem> out) throws Exception {
                        String[] fields = value.split("\\|");
                        char insertionMark = fields[0].charAt(0);
                        fields[0] = fields[0].substring(1);

                        LocalDate shipDate = LocalDate.parse(fields[10], DateTimeFormatter.ISO_LOCAL_DATE);
                        if (shipDate.isAfter(LocalDate.parse("1995-03-13", DateTimeFormatter.ISO_LOCAL_DATE))) {
                            out.collect(new LineItem(
                                    insertionMark == '+',
                                    Integer.parseInt(fields[0]),   // l_orderkey
                                    Double.parseDouble(fields[5]), // l_extendedprice
                                    Double.parseDouble(fields[6]), // l_discount
                                    shipDate,                      // l_shipdate
                                    Integer.parseInt(fields[3])    // l_lineNumber
                            ));
                        }
                        // 不满足条件就不 emit，直接丢弃
                    }
                });

        DataStream<Order> orderStream = routingStream
                .getSideOutput(TAG_Order)
                .flatMap(new FlatMapFunction<String, Order>() {
                    @Override
                    public void flatMap(String value, Collector<Order> out) throws Exception {
                        String[] fields = value.split("\\|");
                        char insertionMark = fields[0].charAt(0);
                        fields[0] = fields[0].substring(1);

                        LocalDate orderDate = LocalDate.parse(fields[4], DateTimeFormatter.ISO_LOCAL_DATE);
                        if (orderDate.isBefore(LocalDate.parse("1995-03-13", DateTimeFormatter.ISO_LOCAL_DATE))) {
                            out.collect(new Order(
                                    insertionMark == '+',
                                    Integer.parseInt(fields[0]),  // o_orderkey
                                    Integer.parseInt(fields[1]),  // o_custkey
                                    orderDate,                    // o_orderdate
                                    Integer.parseInt(fields[7])   // o_shippriority
                            ));
                        }
                    }
                });

        DataStream<Customer> customerStream = routingStream
                .getSideOutput(TAG_Customer)
                .flatMap(new FlatMapFunction<String, Customer>() {
                    @Override
                    public void flatMap(String value, Collector<Customer> out) throws Exception {
                        String[] fields = value.split("\\|");
                        char insertionMark = fields[0].charAt(0);
                        fields[0] = fields[0].substring(1);

                        String segment = fields[6];
                        if ("AUTOMOBILE".equals(segment)) {
                            out.collect(new Customer(
                                    insertionMark == '+',
                                    Integer.parseInt(fields[0]), // c_custkey
                                    segment                      // c_mktsegment
                            ));
                        }
                    }
                });

         */


                 /*
                 // Get the side v2. Map the string to customized object
                 DataStream<LineItem> lineItemStream = routingStream.getSideOutput(TAG_LineItem).map(new MapFunction<String, LineItem>() {
                     @Override
                     public LineItem map(String value) throws Exception {
                         String[] fields = value.split("\\|");
                         char insertionMark = fields[0].charAt(0);
                         fields[0] = fields[0].substring(1);

                         return new LineItem(
                                 insertionMark == '+',
                                 Integer.parseInt(fields[0]),                                    // l_orderkey
                                 Double.parseDouble(fields[5]),                                  // l_extendedprice
                                 Double.parseDouble(fields[6]),                                  // l_discount
                                 LocalDate.parse(fields[10], DateTimeFormatter.ISO_LOCAL_DATE),  // l_shipdate
                                 Integer.parseInt(fields[3])                                     // l_lineNumber
                         );
                     }
                 });
                 DataStream<Order> orderStream = routingStream.getSideOutput(TAG_Order).map(new MapFunction<String, Order>() {
                     @Override
                     public Order map(String value) throws Exception {
                         String[] fields = value.split("\\|");
                         char insertionMark = fields[0].charAt(0);
                         fields[0] = fields[0].substring(1);

                         return new Order(
                                 insertionMark == '+',
                                 Integer.parseInt(fields[0]),                                    // o_orderkey
                                 Integer.parseInt(fields[1]),                                    // o_custkey
                                 LocalDate.parse(fields[4], DateTimeFormatter.ISO_LOCAL_DATE),   // o_orderdate
                                 Integer.parseInt(fields[7])                                     // o_shippriority
                         );
                     }
                 });
                 DataStream<Customer> customerStream = routingStream.getSideOutput(TAG_Customer).map(new MapFunction<String, Customer>() {
                     @Override
                     public Customer map(String value) throws Exception {
                         String[] fields = value.split("\\|");
                         char insertionMark = fields[0].charAt(0);
                         fields[0] = fields[0].substring(1);

                         return new Customer(
                                 insertionMark == '+',
                                 Integer.parseInt(fields[0]),        // c_custkey
                                 fields[6]                           // c_mktsegment

                         );
                     }
                 });


                 // Filter the stream
                 lineItemStream = lineItemStream.filter(value -> value.getShipDate().isAfter(LocalDate.parse("1995-03-13", DateTimeFormatter.ISO_LOCAL_DATE)));
                 orderStream = orderStream.filter(value -> value.getOrderDate().isBefore(LocalDate.parse("1995-03-13", DateTimeFormatter.ISO_LOCAL_DATE)));
                 customerStream = customerStream.filter(value -> value.getMktSegment().equals("AUTOMOBILE"));
                  */